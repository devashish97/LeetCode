Given a string s, return the longest palindromic substring in s.
Solved inspires by expand around center approach also used in Manacher's algorithm

class Solution:
    def longestPalindrome(self, s: str) -> str:
        if ((s == "")):
            return ""
        n = len(s)
      
        def expandAroundCenter(left: int, right: int) -> int:
            while ((left >=0) and (right < n) and (s[left] == s[right])):
                left -= 1
                right += 1
            return right - left - 1
        
        start = end = 0
        
        ans = []

        for i in range(n):
            l1 = expandAroundCenter(i,i)
            l2 = expandAroundCenter(i,i+1)
            l = max(l1, l2)
            if (l > end - start ):
                start = i - int((l-1)/2)
                end = i + int(l/2) + 1
        return s[start:end]
